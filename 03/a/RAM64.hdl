// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in = true, sel[0] = address[3], sel[1] = address[4], sel[2] = address[5], a = l1, b = l2, c = l3, d = l4, e = l5, f = l6, g = l7, h = l8);
   And(a = l1, b = load, out = la);
   And(a = l2, b = load, out = lb);
   And(a = l3, b = load, out = lc);
   And(a = l4, b = load, out = ld);
   And(a = l5, b = load, out = le);
   And(a = l6, b = load, out = lf);
   And(a = l7, b = load, out = lg);
   And(a = l8, b = load, out = lh);
   RAM8(in = in, load = la, address = address[0..2], out = a);
   RAM8(in = in, load = lb, address = address[0..2], out = b);
   RAM8(in = in, load = lc, address = address[0..2], out = c);
   RAM8(in = in, load = ld, address = address[0..2], out = d);
   RAM8(in = in, load = le, address = address[0..2], out = e);
   RAM8(in = in, load = lf, address = address[0..2], out = f);
   RAM8(in = in, load = lg, address = address[0..2], out = g);
   RAM8(in = in, load = lh, address = address[0..2], out = h);
   Mux8Way16(a = a, b = b, c = c, d = d, e = e, f = f, g = g, h = h, sel = address[3..5], out = out);
}